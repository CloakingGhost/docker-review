name : Deploy Service

on: 
 push:
  branches:
    - main


jobs:
  docker-build-push:
    runs-on: ubuntu-24.04
    steps:
      # 소스 가져오기
      - name: Checkout code
        uses: actions/checkout@v4.2.2
        
      # 디스코드로 메세지 전송 (Channel 1)
      - name: Start Message (Channel 1)
        # 라이브러리 개발자/라이브러리 이름@버전
        uses: sarisia/actions-status-discord@v1
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          title: 시작한다. 배포.
          
      - name: Create .env file
        run: |
          echo "${{secrets.ENV_VARIABLES}}" >> .env
          cat .env

      # 캐시 저장 설정을 위한 actions(라이브러리)
      - name: Cache Docker Image Layer
        # actions/cache : 깃허브 캐시 저장소 활용을 위한 라이브러리
        uses: actions/cache@v4.2.0
        with:
          path: /tmp/.buildx-cache
          # cache를 구분하기 위한 식별자
          # 같은 이름으로 하면 캐싱이 유지됨
          key: docker-${{ github.sha }}

      # 캐시 관리 라이브러리 
      - name: Set up Docker Buildkit
        uses: docker/setup-buildx-action@v3

        # 빌더 사용
      - name: Create Buildkit Builder
        run: |
          docker buildx create --use --name buildkit
          docker buildx use buildkit

      - name: Docker Image Build
        # run: docker compose build
        run: docker compose build --build-arg BUILDKIT_INLINE_CACHE=1


      - name: Login DockerHub
        run: echo '${{ secrets.DOCKER_PASSWORD }}' | docker login -u '${{ secrets.DOCKER_USERNAME }}' --password-stdin
